"""
Django settings for tsadmin project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from django.utils.log import RequireDebugFalse, RequireDebugTrue

# 加载环境变量
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-4%e^#z4vu-9l4e1-++@-47%rd84m%zdsx0ibm^chjfe*h6rnz9"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(",")


# Application definition

INSTALLED_APPS = [
    "simpleui",  # Django SimpleUI (放在 admin 前面)
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 第三方应用
    "corsheaders",
    "django_filters",
    "ninja",  # django-ninja
    "ninja_extra",  # django-ninja-extra
    "ninja_jwt",  # django-ninja-jwt
    "taggit",  # Taggit
    # 自定义应用
    "apps.business",
    "apps.system",
    "apps.engine",
    
]

# IP白名单
IP_WHITELIST = os.getenv("IP_WHITELIST").split(",")

# 频率限制配置
RATELIMIT_ENABLE = True
RATELIMIT_RATE = os.getenv("RATELIMIT_RATE", "30/h")  # 默认每小时100次请求

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS 中间件
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "tsadmin.utils.fu_logger.FuLoggerMiddleware",  # 日志处理中间件
    # "tsadmin.utils.fu_middleware.IPWhitelistMiddleware",  # IP白名单中间件
    # "tsadmin.utils.fu_middleware.RateLimitMiddleware",  # 请求频率限制中间件
    "tsadmin.utils.fu_currentuser.CurrentUserMiddleware",  # 当前用户中间件
]

ROOT_URLCONF = "tsadmin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tsadmin.wsgi.application"

# 添加  Ninja JWT 配置
NINJA_JWT = {
    "ACCESS_TOKEN_LIFETIME": int(os.getenv("JWT_ACCESS_TOKEN_EXPIRE_MINUTES", "60")),
    "REFRESH_TOKEN_LIFETIME": int(os.getenv("JWT_REFRESH_TOKEN_EXPIRE_DAYS", "7")),
    "ROTATE_REFRESH_TOKENS": False,
    "ALGORITHM": os.getenv("JWT_ALGORITHM", "HS256"),
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# 添加 CORS 配置
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

# 指定自定义用户模型
AUTH_USER_MODEL = "system.User"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.mysql"),
        "NAME": os.getenv("DB_NAME", "tsadmin"),
        "USER": os.getenv("DB_USER", "root"),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", "localhost"),
        "PORT": os.getenv("DB_PORT", "3306"),
    }
}

# Redis配置
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_DB = int(os.getenv("REDIS_DB", "0"))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", "")

# 缓存配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD,
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
        },
    }
}

# Celery配置
CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
CELERY_RESULT_BACKEND = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Shanghai"
CELERY_ENABLE_UTC = False

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 日志中间件配置
FU_LOG_ENABLE = True  # 是否启用日志
FU_LOG_METHODS = ["POST", "PUT", "DELETE"]  # 需要记录的HTTP方法，'ALL'表示全部
FU_LOG_EXCLUDE_PATHS = ["/api/health", "/api/token"]  # 排除的路径
FU_LOG_TO_DB = True  # 是否保存到数据库

# API模块映射
FU_API_MODULE_MAP = {
    "/api/business/activity": "活动管理",
    "/api/system/user": "用户管理",
    # ...其他模块映射
}

# 日志配置
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "verbose": {
#             "format": "{asctime} [{levelname}] {module}.{funcName}:{lineno} - {message}",
#             "style": "{",
#         },
#     },
#     "handlers": {
#         "console": {
#             "level": "INFO",
#             "class": "logging.StreamHandler",
#             "formatter": "verbose",
#         },
#         "api_file": {
#             "level": "INFO",
#             "class": "logging.handlers.RotatingFileHandler",
#             "filename": os.path.join(BASE_DIR, "logs/api.log"),
#             "maxBytes": 10 * 1024 * 1024,  # 10 MB
#             "backupCount": 10,
#             "formatter": "verbose",
#         },
#         "error_file": {
#             "level": "ERROR",
#             "class": "logging.handlers.RotatingFileHandler",
#             "filename": os.path.join(BASE_DIR, "logs/error.log"),
#             "maxBytes": 10 * 1024 * 1024,  # 10 MB
#             "backupCount": 10,
#             "formatter": "verbose",
#         },
#     },
#     "loggers": {
#         "api": {
#             "handlers": ["console", "api_file"],
#             "level": "INFO",
#             "propagate": False,
#         },
#         "error": {
#             "handlers": ["console", "error_file"],
#             "level": "ERROR",
#             "propagate": False,
#         },
#     },
# }
# 日志配置
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} [{levelname}] {module}.{funcName}:{lineno} - {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        # 开发环境过滤器
        "require_debug_true": {
            "()": RequireDebugTrue,
        },
        # 生产环境过滤器
        "require_debug_false": {
            "()": RequireDebugFalse,
        },
        # 自定义警告过滤器
        "suppress_dev_warnings": {
            "()": "django.utils.log.CallbackFilter",
            "callback": lambda record: not (
                "development server" in record.getMessage().lower() or 
                "you have 18 unapplied migration" in record.getMessage().lower()
            )
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "filters": ["suppress_dev_warnings", "require_debug_true"],
        },
        "api_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",  # 改为按时间轮转
            "filename": os.path.join(BASE_DIR, "logs/api.log"),
            "when": "midnight",
            "backupCount": 30,
            "formatter": "verbose",
            "filters": ["require_debug_false"],
        },
        "error_file": {
            "level": "WARNING",  # 调整为捕获WARNING及以上级别
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs/error.log"),
            "maxBytes": 20 * 1024 * 1024,  # 20 MB
            "backupCount": 15,
            "formatter": "verbose",
            "filters": ["require_debug_false"],
        },
        "debug_file": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs/debug.log"),
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
            "formatter": "verbose",
            "filters": ["require_debug_true"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "error_file", "debug_file"],
            "level": "INFO",
            "propagate": False,
        },
        "api": {
            "handlers": ["api_file", "error_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        # 添加安全日志记录
        "django.security": {
            "handlers": ["error_file"],
            "level": "WARNING",
            "propagate": False,
        },
    },
    # 添加根记录器
    "root": {
        "handlers": ["console", "debug_file"],
        "level": "WARNING",
    }
}